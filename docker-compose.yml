version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: food_ordering_db
    environment:
      POSTGRES_DB: food_ordering
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d food_ordering"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: food_ordering_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: food_ordering_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Pricing Service
  pricing-service:
    build:
      context: ./pricing-service
      dockerfile: Dockerfile
    container_name: pricing_service
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "5001:5001"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Order Service (API)
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order_service
    environment:
      - DATABASE_URL=postgresql://admin:admin123@postgres:5432/food_ordering
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin123
      - PRICING_SERVICE_URL=http://pricing-service:5001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      pricing-service:
        condition: service_started
    restart: unless-stopped

  # Worker Service (Background Processing)
  worker-service:
    build:
      context: ./worker-service
      dockerfile: Dockerfile
    container_name: worker_service
    environment:
      - DATABASE_URL=postgresql://admin:admin123@postgres:5432/food_ordering
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin123
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data: